# https://github.com/marketplace/actions/validate-json
# https://stackoverflow.com/a/61919791
name: Deploy from JSON (Raw)

on:
  workflow_dispatch:
    inputs:
      matrix:
        description: Custom Deploy Jobs (Type)
      is_plan_mode:
        type: boolean
        description: Plan Mode
        default: "false" # GitHub Action require 'true' or 'false' in string type
        required: true
  push:

jobs:
  get-matrix:
    runs-on: ubuntu-latest
    outputs:
      deployment-matrix: ${{ steps.export-deployment-matrix.outputs.deployment-matrix }}
    steps:
    - uses: actions/checkout@v2
    - name: Export deployment matrix
      id: export-deployment-matrix
      run: |
        MATRIX="${{ github.event.inputs.matrix }}"
        if [[ "$MATRIX" == "" ]]
        then
          echo "::notice title=Get Matrix::Use Matrix from JSON files"
          npm install --only=prod
          node ./from-json/example.js deployment-matrix
        else
          echo "::notice title=Get Matrix::Use Custom matrix from input"
          echo "::set-output name=deployment-matrix::$MATRIX"
        fi
      working-directory: ./.github/workflows/configs

    - name: Show current config
      run: |
        echo "::notice title=Current Matrix::${{ steps.export-deployment-matrix.outputs.deployment-matrix }}"
        echo "${{ steps.export-deployment-matrix.outputs.deployment-matrix }}" > deploy-config.json

    - uses: actions/upload-artifact@v3
      with:
        name: deploy-config
        path: deploy-config.json

    - name: Exit if plan mode enabled
      run: |
        PLAN_MODE="${{ github.event.inputs.is_plan_mode }}"
        if [[ "$PLAN_MODE" == "true" ]]
        then
          echo "::notice title=Get Matrix::Exit with plan Mode"
          exit 1
        fi
        
    # - name: Export deployment matrix
    #   id: export-deployment-matrix
    #   run: |
    #     JSON="$(cat ./.github/workflows/deployment-config.json)"
    #     JSON="${JSON//'%'/'%25'}"
    #     JSON="${JSON//$'\n'/'%0A'}"
    #     JSON="${JSON//$'\r'/'%0D'}"
    #     echo "::set-output name=deployment-matrix::$JSON"
          
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [ build ]
  #   strategy:
  #     matrix: 
  #       server: ${{ fromJson(needs.build.outputs.deployment-matrix).web }}
        
  #   steps:
  #   - name: Test Deploy
  #     run: |
  #       echo "${{ matrix.server.name }}"
  #   - name: Test Deploy IP
  #     run: |
  #       echo "${{ matrix.server.ip }}"
      
  build:
    if: toJSON(fromJson(needs.get-matrix.outputs.deployment-matrix).web) != null
    runs-on: ubuntu-latest
    needs: [ get-matrix ]
    steps:
      - name: Test Deploy
        run: |
          echo "Build something"
          echo "- >> ${{ toJSON(fromJson(needs.get-matrix.outputs.deployment-matrix).web) != '[]' }}"
          echo "- >> ${{ toJSON(fromJson(needs.get-matrix.outputs.deployment-matrix).web) != '' }}"
          echo "- >> ${{ toJSON(fromJson(needs.get-matrix.outputs.deployment-matrix).web) != null }}"
          echo "- >> ${{ toJSON(fromJson(needs.get-matrix.outputs.deployment-matrix).web) }}"

  deploy:
    runs-on: ubuntu-latest
    needs: [ get-matrix, build ]
    strategy:
      matrix: 
        include: ${{ fromJson(needs.get-matrix.outputs.deployment-matrix).web }}
        
    steps:
    - name: Test Deploy
      run: |
        echo "${{ matrix.name }}"
    - name: Test Deploy IP
      run: |
        echo "${{ matrix.ip }}"
      